// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package v1alpha1

import (
	ackv1alpha1 "github.com/aws-controllers-k8s/runtime/apis/core/v1alpha1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// RuleSpec defines the desired state of Rule.
//
// Information about a rule.
type RuleSpec struct {

	// The actions.
	// +kubebuilder:validation:Required
	Actions []*Action `json:"actions"`
	// The conditions.
	// +kubebuilder:validation:Required
	Conditions []*RuleCondition `json:"conditions"`
	// The Amazon Resource Name (ARN) of the listener.
	ListenerARN *string                                  `json:"listenerARN,omitempty"`
	ListenerRef *ackv1alpha1.AWSResourceReferenceWrapper `json:"listenerRef,omitempty"`
	// The rule priority. A listener can't have multiple rules with the same priority.
	// +kubebuilder:validation:Required
	Priority *int64 `json:"priority"`
	// The tags to assign to the rule.
	Tags []*Tag `json:"tags,omitempty"`
}

// RuleStatus defines the observed state of Rule
type RuleStatus struct {
	// All CRs managed by ACK have a common `Status.ACKResourceMetadata` member
	// that is used to contain resource sync state, account ownership,
	// constructed ARN for the resource
	// +kubebuilder:validation:Optional
	ACKResourceMetadata *ackv1alpha1.ResourceMetadata `json:"ackResourceMetadata"`
	// All CRS managed by ACK have a common `Status.Conditions` member that
	// contains a collection of `ackv1alpha1.Condition` objects that describe
	// the various terminal states of the CR and its backend AWS service API
	// resource
	// +kubebuilder:validation:Optional
	Conditions []*ackv1alpha1.Condition `json:"conditions"`
	// Indicates whether this is the default rule.
	// +kubebuilder:validation:Optional
	IsDefault *bool `json:"isDefault,omitempty"`
}

// Rule is the Schema for the Rules API
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
type Rule struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              RuleSpec   `json:"spec,omitempty"`
	Status            RuleStatus `json:"status,omitempty"`
}

// RuleList contains a list of Rule
// +kubebuilder:object:root=true
type RuleList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Rule `json:"items"`
}

func init() {
	SchemeBuilder.Register(&Rule{}, &RuleList{})
}

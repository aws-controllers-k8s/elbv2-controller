// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package v1alpha1

import (
	ackv1alpha1 "github.com/aws-controllers-k8s/runtime/apis/core/v1alpha1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// TargetGroupSpec defines the desired state of TargetGroup.
//
// Information about a target group.
type TargetGroupSpec struct {

	// Indicates whether health checks are enabled. If the target type is lambda,
	// health checks are disabled by default but can be enabled. If the target type
	// is instance, ip, or alb, health checks are always enabled and can't be disabled.
	HealthCheckEnabled *bool `json:"healthCheckEnabled,omitempty"`
	// The approximate amount of time, in seconds, between health checks of an individual
	// target. The range is 5-300. If the target group protocol is TCP, TLS, UDP,
	// TCP_UDP, HTTP or HTTPS, the default is 30 seconds. If the target group protocol
	// is GENEVE, the default is 10 seconds. If the target type is lambda, the default
	// is 35 seconds.
	HealthCheckIntervalSeconds *int64 `json:"healthCheckIntervalSeconds,omitempty"`
	// [HTTP/HTTPS health checks] The destination for health checks on the targets.
	//
	// [HTTP1 or HTTP2 protocol version] The ping path. The default is /.
	//
	// [GRPC protocol version] The path of a custom health check method with the
	// format /package.service/method. The default is /Amazon Web Services.ALB/healthcheck.
	HealthCheckPath *string `json:"healthCheckPath,omitempty"`
	// The port the load balancer uses when performing health checks on targets.
	// If the protocol is HTTP, HTTPS, TCP, TLS, UDP, or TCP_UDP, the default is
	// traffic-port, which is the port on which each target receives traffic from
	// the load balancer. If the protocol is GENEVE, the default is port 80.
	HealthCheckPort *string `json:"healthCheckPort,omitempty"`
	// The protocol the load balancer uses when performing health checks on targets.
	// For Application Load Balancers, the default is HTTP. For Network Load Balancers
	// and Gateway Load Balancers, the default is TCP. The TCP protocol is not supported
	// for health checks if the protocol of the target group is HTTP or HTTPS. The
	// GENEVE, TLS, UDP, and TCP_UDP protocols are not supported for health checks.
	HealthCheckProtocol *string `json:"healthCheckProtocol,omitempty"`
	// The amount of time, in seconds, during which no response from a target means
	// a failed health check. The range is 2â€“120 seconds. For target groups with
	// a protocol of HTTP, the default is 6 seconds. For target groups with a protocol
	// of TCP, TLS or HTTPS, the default is 10 seconds. For target groups with a
	// protocol of GENEVE, the default is 5 seconds. If the target type is lambda,
	// the default is 30 seconds.
	HealthCheckTimeoutSeconds *int64 `json:"healthCheckTimeoutSeconds,omitempty"`
	// The number of consecutive health check successes required before considering
	// a target healthy. The range is 2-10. If the target group protocol is TCP,
	// TCP_UDP, UDP, TLS, HTTP or HTTPS, the default is 5. For target groups with
	// a protocol of GENEVE, the default is 5. If the target type is lambda, the
	// default is 5.
	HealthyThresholdCount *int64 `json:"healthyThresholdCount,omitempty"`
	// The IP address type. The default value is ipv4.
	IPAddressType *string `json:"ipAddressType,omitempty"`
	// [HTTP/HTTPS health checks] The HTTP or gRPC codes to use when checking for
	// a successful response from a target. For target groups with a protocol of
	// TCP, TCP_UDP, UDP or TLS the range is 200-599. For target groups with a protocol
	// of HTTP or HTTPS, the range is 200-499. For target groups with a protocol
	// of GENEVE, the range is 200-399.
	Matcher *Matcher `json:"matcher,omitempty"`
	// The name of the target group.
	//
	// This name must be unique per region per account, can have a maximum of 32
	// characters, must contain only alphanumeric characters or hyphens, and must
	// not begin or end with a hyphen.
	// +kubebuilder:validation:Required
	Name *string `json:"name"`
	// The port on which the targets receive traffic. This port is used unless you
	// specify a port override when registering the target. If the target is a Lambda
	// function, this parameter does not apply. If the protocol is GENEVE, the supported
	// port is 6081.
	Port *int64 `json:"port,omitempty"`
	// The protocol to use for routing traffic to the targets. For Application Load
	// Balancers, the supported protocols are HTTP and HTTPS. For Network Load Balancers,
	// the supported protocols are TCP, TLS, UDP, or TCP_UDP. For Gateway Load Balancers,
	// the supported protocol is GENEVE. A TCP_UDP listener must be associated with
	// a TCP_UDP target group. If the target is a Lambda function, this parameter
	// does not apply.
	Protocol *string `json:"protocol,omitempty"`
	// [HTTP/HTTPS protocol] The protocol version. Specify GRPC to send requests
	// to targets using gRPC. Specify HTTP2 to send requests to targets using HTTP/2.
	// The default is HTTP1, which sends requests to targets using HTTP/1.1.
	ProtocolVersion *string `json:"protocolVersion,omitempty"`
	// The tags to assign to the target group.
	Tags []*Tag `json:"tags,omitempty"`
	// The type of target that you must specify when registering targets with this
	// target group. You can't specify targets for a target group using more than
	// one target type.
	//
	//   - instance - Register targets by instance ID. This is the default value.
	//
	//   - ip - Register targets by IP address. You can specify IP addresses from
	//     the subnets of the virtual private cloud (VPC) for the target group, the
	//     RFC 1918 range (10.0.0.0/8, 172.16.0.0/12, and 192.168.0.0/16), and the
	//     RFC 6598 range (100.64.0.0/10). You can't specify publicly routable IP
	//     addresses.
	//
	//   - lambda - Register a single Lambda function as a target.
	//
	//   - alb - Register a single Application Load Balancer as a target.
	TargetType *string `json:"targetType,omitempty"`
	// The targets.
	Targets []*TargetDescription `json:"targets,omitempty"`
	// The number of consecutive health check failures required before considering
	// a target unhealthy. The range is 2-10. If the target group protocol is TCP,
	// TCP_UDP, UDP, TLS, HTTP or HTTPS, the default is 2. For target groups with
	// a protocol of GENEVE, the default is 2. If the target type is lambda, the
	// default is 5.
	UnhealthyThresholdCount *int64 `json:"unhealthyThresholdCount,omitempty"`
	// The identifier of the virtual private cloud (VPC). If the target is a Lambda
	// function, this parameter does not apply. Otherwise, this parameter is required.
	VPCID  *string                                  `json:"vpcID,omitempty"`
	VPCRef *ackv1alpha1.AWSResourceReferenceWrapper `json:"vpcRef,omitempty"`
}

// TargetGroupStatus defines the observed state of TargetGroup
type TargetGroupStatus struct {
	// All CRs managed by ACK have a common `Status.ACKResourceMetadata` member
	// that is used to contain resource sync state, account ownership,
	// constructed ARN for the resource
	// +kubebuilder:validation:Optional
	ACKResourceMetadata *ackv1alpha1.ResourceMetadata `json:"ackResourceMetadata"`
	// All CRs managed by ACK have a common `Status.Conditions` member that
	// contains a collection of `ackv1alpha1.Condition` objects that describe
	// the various terminal states of the CR and its backend AWS service API
	// resource
	// +kubebuilder:validation:Optional
	Conditions []*ackv1alpha1.Condition `json:"conditions"`
	// The Amazon Resource Name (ARN) of the load balancer that routes traffic to
	// this target group. You can use each target group with only one load balancer.
	// +kubebuilder:validation:Optional
	LoadBalancerARNs []*string `json:"loadBalancerARNs,omitempty"`
}

// TargetGroup is the Schema for the TargetGroups API
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
type TargetGroup struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              TargetGroupSpec   `json:"spec,omitempty"`
	Status            TargetGroupStatus `json:"status,omitempty"`
}

// TargetGroupList contains a list of TargetGroup
// +kubebuilder:object:root=true
type TargetGroupList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []TargetGroup `json:"items"`
}

func init() {
	SchemeBuilder.Register(&TargetGroup{}, &TargetGroupList{})
}

// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package load_balancer

import (
	"context"
	"errors"
	"fmt"
	"reflect"
	"strings"

	ackv1alpha1 "github.com/aws-controllers-k8s/runtime/apis/core/v1alpha1"
	ackcompare "github.com/aws-controllers-k8s/runtime/pkg/compare"
	ackcondition "github.com/aws-controllers-k8s/runtime/pkg/condition"
	ackerr "github.com/aws-controllers-k8s/runtime/pkg/errors"
	ackrequeue "github.com/aws-controllers-k8s/runtime/pkg/requeue"
	ackrtlog "github.com/aws-controllers-k8s/runtime/pkg/runtime/log"
	"github.com/aws/aws-sdk-go-v2/aws"
	svcsdk "github.com/aws/aws-sdk-go-v2/service/elasticloadbalancingv2"
	svcsdktypes "github.com/aws/aws-sdk-go-v2/service/elasticloadbalancingv2/types"
	smithy "github.com/aws/smithy-go"
	corev1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	svcapitypes "github.com/aws-controllers-k8s/elbv2-controller/apis/v1alpha1"
)

// Hack to avoid import errors during build...
var (
	_ = &metav1.Time{}
	_ = strings.ToLower("")
	_ = &svcsdk.Client{}
	_ = &svcapitypes.LoadBalancer{}
	_ = ackv1alpha1.AWSAccountID("")
	_ = &ackerr.NotFound
	_ = &ackcondition.NotManagedMessage
	_ = &reflect.Value{}
	_ = fmt.Sprintf("")
	_ = &ackrequeue.NoRequeue{}
	_ = &aws.Config{}
)

// sdkFind returns SDK-specific information about a supplied resource
func (rm *resourceManager) sdkFind(
	ctx context.Context,
	r *resource,
) (latest *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkFind")
	defer func() {
		exit(err)
	}()
	// If any required fields in the input shape are missing, AWS resource is
	// not created yet. Return NotFound here to indicate to callers that the
	// resource isn't yet created.
	if rm.requiredFieldsMissingFromReadManyInput(r) {
		return nil, ackerr.NotFound
	}

	input, err := rm.newListRequestPayload(r)
	if err != nil {
		return nil, err
	}
	var resp *svcsdk.DescribeLoadBalancersOutput
	resp, err = rm.sdkapi.DescribeLoadBalancers(ctx, input)
	rm.metrics.RecordAPICall("READ_MANY", "DescribeLoadBalancers", err)
	if err != nil {
		var awsErr smithy.APIError
		if errors.As(err, &awsErr) && awsErr.ErrorCode() == "LoadBalancerNotFound" {
			return nil, ackerr.NotFound
		}
		return nil, err
	}

	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := r.ko.DeepCopy()

	found := false
	for _, elem := range resp.LoadBalancers {
		if elem.AvailabilityZones != nil {
			f0 := []*svcapitypes.AvailabilityZone{}
			for _, f0iter := range elem.AvailabilityZones {
				f0elem := &svcapitypes.AvailabilityZone{}
				if f0iter.LoadBalancerAddresses != nil {
					f0elemf0 := []*svcapitypes.LoadBalancerAddress{}
					for _, f0elemf0iter := range f0iter.LoadBalancerAddresses {
						f0elemf0elem := &svcapitypes.LoadBalancerAddress{}
						if f0elemf0iter.AllocationId != nil {
							f0elemf0elem.AllocationID = f0elemf0iter.AllocationId
						}
						if f0elemf0iter.IPv6Address != nil {
							f0elemf0elem.IPv6Address = f0elemf0iter.IPv6Address
						}
						if f0elemf0iter.IpAddress != nil {
							f0elemf0elem.IPAddress = f0elemf0iter.IpAddress
						}
						if f0elemf0iter.PrivateIPv4Address != nil {
							f0elemf0elem.PrivateIPv4Address = f0elemf0iter.PrivateIPv4Address
						}
						f0elemf0 = append(f0elemf0, f0elemf0elem)
					}
					f0elem.LoadBalancerAddresses = f0elemf0
				}
				if f0iter.OutpostId != nil {
					f0elem.OutpostID = f0iter.OutpostId
				}
				if f0iter.SubnetId != nil {
					f0elem.SubnetID = f0iter.SubnetId
				}
				if f0iter.ZoneName != nil {
					f0elem.ZoneName = f0iter.ZoneName
				}
				f0 = append(f0, f0elem)
			}
			ko.Status.AvailabilityZones = f0
		} else {
			ko.Status.AvailabilityZones = nil
		}
		if elem.CanonicalHostedZoneId != nil {
			ko.Status.CanonicalHostedZoneID = elem.CanonicalHostedZoneId
		} else {
			ko.Status.CanonicalHostedZoneID = nil
		}
		if elem.CreatedTime != nil {
			ko.Status.CreatedTime = &metav1.Time{*elem.CreatedTime}
		} else {
			ko.Status.CreatedTime = nil
		}
		if elem.CustomerOwnedIpv4Pool != nil {
			ko.Spec.CustomerOwnedIPv4Pool = elem.CustomerOwnedIpv4Pool
		} else {
			ko.Spec.CustomerOwnedIPv4Pool = nil
		}
		if elem.DNSName != nil {
			ko.Status.DNSName = elem.DNSName
		} else {
			ko.Status.DNSName = nil
		}
		if elem.EnforceSecurityGroupInboundRulesOnPrivateLinkTraffic != nil {
			ko.Status.EnforceSecurityGroupInboundRulesOnPrivateLinkTraffic = elem.EnforceSecurityGroupInboundRulesOnPrivateLinkTraffic
		} else {
			ko.Status.EnforceSecurityGroupInboundRulesOnPrivateLinkTraffic = nil
		}
		if elem.IpAddressType != "" {
			ko.Spec.IPAddressType = aws.String(string(elem.IpAddressType))
		} else {
			ko.Spec.IPAddressType = nil
		}
		if elem.LoadBalancerArn != nil {
			if ko.Status.ACKResourceMetadata == nil {
				ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
			}
			tmpARN := ackv1alpha1.AWSResourceName(*elem.LoadBalancerArn)
			ko.Status.ACKResourceMetadata.ARN = &tmpARN
		}
		if elem.LoadBalancerName != nil {
			ko.Spec.Name = elem.LoadBalancerName
		} else {
			ko.Spec.Name = nil
		}
		if elem.Scheme != "" {
			ko.Spec.Scheme = aws.String(string(elem.Scheme))
		} else {
			ko.Spec.Scheme = nil
		}
		if elem.SecurityGroups != nil {
			ko.Spec.SecurityGroups = aws.StringSlice(elem.SecurityGroups)
		} else {
			ko.Spec.SecurityGroups = nil
		}
		if elem.State != nil {
			f11 := &svcapitypes.LoadBalancerState{}
			if elem.State.Code != "" {
				f11.Code = aws.String(string(elem.State.Code))
			}
			if elem.State.Reason != nil {
				f11.Reason = elem.State.Reason
			}
			ko.Status.State = f11
		} else {
			ko.Status.State = nil
		}
		if elem.Type != "" {
			ko.Spec.Type = aws.String(string(elem.Type))
		} else {
			ko.Spec.Type = nil
		}
		if elem.VpcId != nil {
			ko.Status.VPCID = elem.VpcId
		} else {
			ko.Status.VPCID = nil
		}
		found = true
		break
	}
	if !found {
		return nil, ackerr.NotFound
	}

	rm.setStatusDefaults(ko)
	if err := rm.setResourceAdditionalFields(ctx, ko); err != nil {
		return nil, err
	}
	ko.Spec.Tags, err = rm.getTags(ctx, string(*ko.Status.ACKResourceMetadata.ARN))
	if err != nil {
		return nil, err
	}

	return &resource{ko}, nil
}

// requiredFieldsMissingFromReadManyInput returns true if there are any fields
// for the ReadMany Input shape that are required but not present in the
// resource's Spec or Status
func (rm *resourceManager) requiredFieldsMissingFromReadManyInput(
	r *resource,
) bool {
	return r.ko.Spec.Name == nil

}

// newListRequestPayload returns SDK-specific struct for the HTTP request
// payload of the List API call for the resource
func (rm *resourceManager) newListRequestPayload(
	r *resource,
) (*svcsdk.DescribeLoadBalancersInput, error) {
	res := &svcsdk.DescribeLoadBalancersInput{}

	if r.ko.Spec.Name != nil {
		f2 := []string{}
		f2 = append(f2, *r.ko.Spec.Name)
		res.Names = f2
	}

	return res, nil
}

// sdkCreate creates the supplied resource in the backend AWS service API and
// returns a copy of the resource with resource fields (in both Spec and
// Status) filled in with values from the CREATE API operation's Output shape.
func (rm *resourceManager) sdkCreate(
	ctx context.Context,
	desired *resource,
) (created *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkCreate")
	defer func() {
		exit(err)
	}()
	input, err := rm.newCreateRequestPayload(ctx, desired)
	if err != nil {
		return nil, err
	}

	var resp *svcsdk.CreateLoadBalancerOutput
	_ = resp
	resp, err = rm.sdkapi.CreateLoadBalancer(ctx, input)
	rm.metrics.RecordAPICall("CREATE", "CreateLoadBalancer", err)
	if err != nil {
		return nil, err
	}
	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := desired.ko.DeepCopy()

	found := false
	for _, elem := range resp.LoadBalancers {
		if elem.AvailabilityZones != nil {
			f0 := []*svcapitypes.AvailabilityZone{}
			for _, f0iter := range elem.AvailabilityZones {
				f0elem := &svcapitypes.AvailabilityZone{}
				if f0iter.LoadBalancerAddresses != nil {
					f0elemf0 := []*svcapitypes.LoadBalancerAddress{}
					for _, f0elemf0iter := range f0iter.LoadBalancerAddresses {
						f0elemf0elem := &svcapitypes.LoadBalancerAddress{}
						if f0elemf0iter.AllocationId != nil {
							f0elemf0elem.AllocationID = f0elemf0iter.AllocationId
						}
						if f0elemf0iter.IPv6Address != nil {
							f0elemf0elem.IPv6Address = f0elemf0iter.IPv6Address
						}
						if f0elemf0iter.IpAddress != nil {
							f0elemf0elem.IPAddress = f0elemf0iter.IpAddress
						}
						if f0elemf0iter.PrivateIPv4Address != nil {
							f0elemf0elem.PrivateIPv4Address = f0elemf0iter.PrivateIPv4Address
						}
						f0elemf0 = append(f0elemf0, f0elemf0elem)
					}
					f0elem.LoadBalancerAddresses = f0elemf0
				}
				if f0iter.OutpostId != nil {
					f0elem.OutpostID = f0iter.OutpostId
				}
				if f0iter.SubnetId != nil {
					f0elem.SubnetID = f0iter.SubnetId
				}
				if f0iter.ZoneName != nil {
					f0elem.ZoneName = f0iter.ZoneName
				}
				f0 = append(f0, f0elem)
			}
			ko.Status.AvailabilityZones = f0
		} else {
			ko.Status.AvailabilityZones = nil
		}
		if elem.CanonicalHostedZoneId != nil {
			ko.Status.CanonicalHostedZoneID = elem.CanonicalHostedZoneId
		} else {
			ko.Status.CanonicalHostedZoneID = nil
		}
		if elem.CreatedTime != nil {
			ko.Status.CreatedTime = &metav1.Time{*elem.CreatedTime}
		} else {
			ko.Status.CreatedTime = nil
		}
		if elem.CustomerOwnedIpv4Pool != nil {
			ko.Spec.CustomerOwnedIPv4Pool = elem.CustomerOwnedIpv4Pool
		} else {
			ko.Spec.CustomerOwnedIPv4Pool = nil
		}
		if elem.DNSName != nil {
			ko.Status.DNSName = elem.DNSName
		} else {
			ko.Status.DNSName = nil
		}
		if elem.EnforceSecurityGroupInboundRulesOnPrivateLinkTraffic != nil {
			ko.Status.EnforceSecurityGroupInboundRulesOnPrivateLinkTraffic = elem.EnforceSecurityGroupInboundRulesOnPrivateLinkTraffic
		} else {
			ko.Status.EnforceSecurityGroupInboundRulesOnPrivateLinkTraffic = nil
		}
		if elem.IpAddressType != "" {
			ko.Spec.IPAddressType = aws.String(string(elem.IpAddressType))
		} else {
			ko.Spec.IPAddressType = nil
		}
		if elem.LoadBalancerArn != nil {
			if ko.Status.ACKResourceMetadata == nil {
				ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
			}
			tmpARN := ackv1alpha1.AWSResourceName(*elem.LoadBalancerArn)
			ko.Status.ACKResourceMetadata.ARN = &tmpARN
		}
		if elem.LoadBalancerName != nil {
			ko.Spec.Name = elem.LoadBalancerName
		} else {
			ko.Spec.Name = nil
		}
		if elem.Scheme != "" {
			ko.Spec.Scheme = aws.String(string(elem.Scheme))
		} else {
			ko.Spec.Scheme = nil
		}
		if elem.SecurityGroups != nil {
			ko.Spec.SecurityGroups = aws.StringSlice(elem.SecurityGroups)
		} else {
			ko.Spec.SecurityGroups = nil
		}
		if elem.State != nil {
			f11 := &svcapitypes.LoadBalancerState{}
			if elem.State.Code != "" {
				f11.Code = aws.String(string(elem.State.Code))
			}
			if elem.State.Reason != nil {
				f11.Reason = elem.State.Reason
			}
			ko.Status.State = f11
		} else {
			ko.Status.State = nil
		}
		if elem.Type != "" {
			ko.Spec.Type = aws.String(string(elem.Type))
		} else {
			ko.Spec.Type = nil
		}
		if elem.VpcId != nil {
			ko.Status.VPCID = elem.VpcId
		} else {
			ko.Status.VPCID = nil
		}
		found = true
		break
	}
	if !found {
		return nil, ackerr.NotFound
	}

	rm.setStatusDefaults(ko)
	if ko.Spec.Tags != nil {
		return nil, ackrequeue.NeededAfter(fmt.Errorf("Requing due to tags in CREATE"), RequeueAfterUpdateDuration)
	}
	return &resource{ko}, nil
}

// newCreateRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Create API call for the resource
func (rm *resourceManager) newCreateRequestPayload(
	ctx context.Context,
	r *resource,
) (*svcsdk.CreateLoadBalancerInput, error) {
	res := &svcsdk.CreateLoadBalancerInput{}

	if r.ko.Spec.CustomerOwnedIPv4Pool != nil {
		res.CustomerOwnedIpv4Pool = r.ko.Spec.CustomerOwnedIPv4Pool
	}
	if r.ko.Spec.IPAddressType != nil {
		res.IpAddressType = svcsdktypes.IpAddressType(*r.ko.Spec.IPAddressType)
	}
	if r.ko.Spec.Name != nil {
		res.Name = r.ko.Spec.Name
	}
	if r.ko.Spec.Scheme != nil {
		res.Scheme = svcsdktypes.LoadBalancerSchemeEnum(*r.ko.Spec.Scheme)
	}
	if r.ko.Spec.SecurityGroups != nil {
		res.SecurityGroups = aws.ToStringSlice(r.ko.Spec.SecurityGroups)
	}
	if r.ko.Spec.SubnetMappings != nil {
		f5 := []svcsdktypes.SubnetMapping{}
		for _, f5iter := range r.ko.Spec.SubnetMappings {
			f5elem := &svcsdktypes.SubnetMapping{}
			if f5iter.AllocationID != nil {
				f5elem.AllocationId = f5iter.AllocationID
			}
			if f5iter.IPv6Address != nil {
				f5elem.IPv6Address = f5iter.IPv6Address
			}
			if f5iter.PrivateIPv4Address != nil {
				f5elem.PrivateIPv4Address = f5iter.PrivateIPv4Address
			}
			if f5iter.SubnetID != nil {
				f5elem.SubnetId = f5iter.SubnetID
			}
			f5 = append(f5, *f5elem)
		}
		res.SubnetMappings = f5
	}
	if r.ko.Spec.Subnets != nil {
		res.Subnets = aws.ToStringSlice(r.ko.Spec.Subnets)
	}
	if r.ko.Spec.Tags != nil {
		f7 := []svcsdktypes.Tag{}
		for _, f7iter := range r.ko.Spec.Tags {
			f7elem := &svcsdktypes.Tag{}
			if f7iter.Key != nil {
				f7elem.Key = f7iter.Key
			}
			if f7iter.Value != nil {
				f7elem.Value = f7iter.Value
			}
			f7 = append(f7, *f7elem)
		}
		res.Tags = f7
	}
	if r.ko.Spec.Type != nil {
		res.Type = svcsdktypes.LoadBalancerTypeEnum(*r.ko.Spec.Type)
	}

	return res, nil
}

// sdkUpdate patches the supplied resource in the backend AWS service API and
// returns a new resource with updated fields.
func (rm *resourceManager) sdkUpdate(
	ctx context.Context,
	desired *resource,
	latest *resource,
	delta *ackcompare.Delta,
) (*resource, error) {
	return rm.customUpdateLoadBalancer(ctx, desired, latest, delta)
}

// sdkDelete deletes the supplied resource in the backend AWS service API
func (rm *resourceManager) sdkDelete(
	ctx context.Context,
	r *resource,
) (latest *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkDelete")
	defer func() {
		exit(err)
	}()
	input, err := rm.newDeleteRequestPayload(r)
	if err != nil {
		return nil, err
	}
	var resp *svcsdk.DeleteLoadBalancerOutput
	_ = resp
	resp, err = rm.sdkapi.DeleteLoadBalancer(ctx, input)
	rm.metrics.RecordAPICall("DELETE", "DeleteLoadBalancer", err)
	return nil, err
}

// newDeleteRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Delete API call for the resource
func (rm *resourceManager) newDeleteRequestPayload(
	r *resource,
) (*svcsdk.DeleteLoadBalancerInput, error) {
	res := &svcsdk.DeleteLoadBalancerInput{}

	if r.ko.Status.ACKResourceMetadata != nil && r.ko.Status.ACKResourceMetadata.ARN != nil {
		res.LoadBalancerArn = (*string)(r.ko.Status.ACKResourceMetadata.ARN)
	}

	return res, nil
}

// setStatusDefaults sets default properties into supplied custom resource
func (rm *resourceManager) setStatusDefaults(
	ko *svcapitypes.LoadBalancer,
) {
	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if ko.Status.ACKResourceMetadata.Region == nil {
		ko.Status.ACKResourceMetadata.Region = &rm.awsRegion
	}
	if ko.Status.ACKResourceMetadata.OwnerAccountID == nil {
		ko.Status.ACKResourceMetadata.OwnerAccountID = &rm.awsAccountID
	}
	if ko.Status.Conditions == nil {
		ko.Status.Conditions = []*ackv1alpha1.Condition{}
	}
}

// updateConditions returns updated resource, true; if conditions were updated
// else it returns nil, false
func (rm *resourceManager) updateConditions(
	r *resource,
	onSuccess bool,
	err error,
) (*resource, bool) {
	ko := r.ko.DeepCopy()
	rm.setStatusDefaults(ko)

	// Terminal condition
	var terminalCondition *ackv1alpha1.Condition = nil
	var recoverableCondition *ackv1alpha1.Condition = nil
	var syncCondition *ackv1alpha1.Condition = nil
	for _, condition := range ko.Status.Conditions {
		if condition.Type == ackv1alpha1.ConditionTypeTerminal {
			terminalCondition = condition
		}
		if condition.Type == ackv1alpha1.ConditionTypeRecoverable {
			recoverableCondition = condition
		}
		if condition.Type == ackv1alpha1.ConditionTypeResourceSynced {
			syncCondition = condition
		}
	}
	var termError *ackerr.TerminalError
	if rm.terminalAWSError(err) || err == ackerr.SecretTypeNotSupported || err == ackerr.SecretNotFound || errors.As(err, &termError) {
		if terminalCondition == nil {
			terminalCondition = &ackv1alpha1.Condition{
				Type: ackv1alpha1.ConditionTypeTerminal,
			}
			ko.Status.Conditions = append(ko.Status.Conditions, terminalCondition)
		}
		var errorMessage = ""
		if err == ackerr.SecretTypeNotSupported || err == ackerr.SecretNotFound || errors.As(err, &termError) {
			errorMessage = err.Error()
		} else {
			awsErr, _ := ackerr.AWSError(err)
			errorMessage = awsErr.Error()
		}
		terminalCondition.Status = corev1.ConditionTrue
		terminalCondition.Message = &errorMessage
	} else {
		// Clear the terminal condition if no longer present
		if terminalCondition != nil {
			terminalCondition.Status = corev1.ConditionFalse
			terminalCondition.Message = nil
		}
		// Handling Recoverable Conditions
		if err != nil {
			if recoverableCondition == nil {
				// Add a new Condition containing a non-terminal error
				recoverableCondition = &ackv1alpha1.Condition{
					Type: ackv1alpha1.ConditionTypeRecoverable,
				}
				ko.Status.Conditions = append(ko.Status.Conditions, recoverableCondition)
			}
			recoverableCondition.Status = corev1.ConditionTrue
			awsErr, _ := ackerr.AWSError(err)
			errorMessage := err.Error()
			if awsErr != nil {
				errorMessage = awsErr.Error()
			}
			recoverableCondition.Message = &errorMessage
		} else if recoverableCondition != nil {
			recoverableCondition.Status = corev1.ConditionFalse
			recoverableCondition.Message = nil
		}
	}
	// Required to avoid the "declared but not used" error in the default case
	_ = syncCondition
	if terminalCondition != nil || recoverableCondition != nil || syncCondition != nil {
		return &resource{ko}, true // updated
	}
	return nil, false // not updated
}

// terminalAWSError returns awserr, true; if the supplied error is an aws Error type
// and if the exception indicates that it is a Terminal exception
// 'Terminal' exception are specified in generator configuration
func (rm *resourceManager) terminalAWSError(err error) bool {
	if err == nil {
		return false
	}

	var terminalErr smithy.APIError
	if !errors.As(err, &terminalErr) {
		return false
	}
	switch terminalErr.ErrorCode() {
	case "ValidationError",
		"InvalidConfigurationRequest",
		"InvalidScheme":
		return true
	default:
		return false
	}
}

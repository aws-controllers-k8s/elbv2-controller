// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package target_group

import (
	"bytes"
	"reflect"

	ackcompare "github.com/aws-controllers-k8s/runtime/pkg/compare"
	acktags "github.com/aws-controllers-k8s/runtime/pkg/tags"
)

// Hack to avoid import errors during build...
var (
	_ = &bytes.Buffer{}
	_ = &reflect.Method{}
	_ = &acktags.Tags{}
)

// newResourceDelta returns a new `ackcompare.Delta` used to compare two
// resources
func newResourceDelta(
	a *resource,
	b *resource,
) *ackcompare.Delta {
	delta := ackcompare.NewDelta()
	if (a == nil && b != nil) ||
		(a != nil && b == nil) {
		delta.Add("", a, b)
		return delta
	}
	customCompare(delta, a, b)

	if ackcompare.HasNilDifference(a.ko.Spec.HealthCheckEnabled, b.ko.Spec.HealthCheckEnabled) {
		delta.Add("Spec.HealthCheckEnabled", a.ko.Spec.HealthCheckEnabled, b.ko.Spec.HealthCheckEnabled)
	} else if a.ko.Spec.HealthCheckEnabled != nil && b.ko.Spec.HealthCheckEnabled != nil {
		if *a.ko.Spec.HealthCheckEnabled != *b.ko.Spec.HealthCheckEnabled {
			delta.Add("Spec.HealthCheckEnabled", a.ko.Spec.HealthCheckEnabled, b.ko.Spec.HealthCheckEnabled)
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.HealthCheckIntervalSeconds, b.ko.Spec.HealthCheckIntervalSeconds) {
		delta.Add("Spec.HealthCheckIntervalSeconds", a.ko.Spec.HealthCheckIntervalSeconds, b.ko.Spec.HealthCheckIntervalSeconds)
	} else if a.ko.Spec.HealthCheckIntervalSeconds != nil && b.ko.Spec.HealthCheckIntervalSeconds != nil {
		if *a.ko.Spec.HealthCheckIntervalSeconds != *b.ko.Spec.HealthCheckIntervalSeconds {
			delta.Add("Spec.HealthCheckIntervalSeconds", a.ko.Spec.HealthCheckIntervalSeconds, b.ko.Spec.HealthCheckIntervalSeconds)
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.HealthCheckPath, b.ko.Spec.HealthCheckPath) {
		delta.Add("Spec.HealthCheckPath", a.ko.Spec.HealthCheckPath, b.ko.Spec.HealthCheckPath)
	} else if a.ko.Spec.HealthCheckPath != nil && b.ko.Spec.HealthCheckPath != nil {
		if *a.ko.Spec.HealthCheckPath != *b.ko.Spec.HealthCheckPath {
			delta.Add("Spec.HealthCheckPath", a.ko.Spec.HealthCheckPath, b.ko.Spec.HealthCheckPath)
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.HealthCheckPort, b.ko.Spec.HealthCheckPort) {
		delta.Add("Spec.HealthCheckPort", a.ko.Spec.HealthCheckPort, b.ko.Spec.HealthCheckPort)
	} else if a.ko.Spec.HealthCheckPort != nil && b.ko.Spec.HealthCheckPort != nil {
		if *a.ko.Spec.HealthCheckPort != *b.ko.Spec.HealthCheckPort {
			delta.Add("Spec.HealthCheckPort", a.ko.Spec.HealthCheckPort, b.ko.Spec.HealthCheckPort)
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.HealthCheckProtocol, b.ko.Spec.HealthCheckProtocol) {
		delta.Add("Spec.HealthCheckProtocol", a.ko.Spec.HealthCheckProtocol, b.ko.Spec.HealthCheckProtocol)
	} else if a.ko.Spec.HealthCheckProtocol != nil && b.ko.Spec.HealthCheckProtocol != nil {
		if *a.ko.Spec.HealthCheckProtocol != *b.ko.Spec.HealthCheckProtocol {
			delta.Add("Spec.HealthCheckProtocol", a.ko.Spec.HealthCheckProtocol, b.ko.Spec.HealthCheckProtocol)
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.HealthCheckTimeoutSeconds, b.ko.Spec.HealthCheckTimeoutSeconds) {
		delta.Add("Spec.HealthCheckTimeoutSeconds", a.ko.Spec.HealthCheckTimeoutSeconds, b.ko.Spec.HealthCheckTimeoutSeconds)
	} else if a.ko.Spec.HealthCheckTimeoutSeconds != nil && b.ko.Spec.HealthCheckTimeoutSeconds != nil {
		if *a.ko.Spec.HealthCheckTimeoutSeconds != *b.ko.Spec.HealthCheckTimeoutSeconds {
			delta.Add("Spec.HealthCheckTimeoutSeconds", a.ko.Spec.HealthCheckTimeoutSeconds, b.ko.Spec.HealthCheckTimeoutSeconds)
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.HealthyThresholdCount, b.ko.Spec.HealthyThresholdCount) {
		delta.Add("Spec.HealthyThresholdCount", a.ko.Spec.HealthyThresholdCount, b.ko.Spec.HealthyThresholdCount)
	} else if a.ko.Spec.HealthyThresholdCount != nil && b.ko.Spec.HealthyThresholdCount != nil {
		if *a.ko.Spec.HealthyThresholdCount != *b.ko.Spec.HealthyThresholdCount {
			delta.Add("Spec.HealthyThresholdCount", a.ko.Spec.HealthyThresholdCount, b.ko.Spec.HealthyThresholdCount)
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.IPAddressType, b.ko.Spec.IPAddressType) {
		delta.Add("Spec.IPAddressType", a.ko.Spec.IPAddressType, b.ko.Spec.IPAddressType)
	} else if a.ko.Spec.IPAddressType != nil && b.ko.Spec.IPAddressType != nil {
		if *a.ko.Spec.IPAddressType != *b.ko.Spec.IPAddressType {
			delta.Add("Spec.IPAddressType", a.ko.Spec.IPAddressType, b.ko.Spec.IPAddressType)
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.Matcher, b.ko.Spec.Matcher) {
		delta.Add("Spec.Matcher", a.ko.Spec.Matcher, b.ko.Spec.Matcher)
	} else if a.ko.Spec.Matcher != nil && b.ko.Spec.Matcher != nil {
		if ackcompare.HasNilDifference(a.ko.Spec.Matcher.GRPCCode, b.ko.Spec.Matcher.GRPCCode) {
			delta.Add("Spec.Matcher.GRPCCode", a.ko.Spec.Matcher.GRPCCode, b.ko.Spec.Matcher.GRPCCode)
		} else if a.ko.Spec.Matcher.GRPCCode != nil && b.ko.Spec.Matcher.GRPCCode != nil {
			if *a.ko.Spec.Matcher.GRPCCode != *b.ko.Spec.Matcher.GRPCCode {
				delta.Add("Spec.Matcher.GRPCCode", a.ko.Spec.Matcher.GRPCCode, b.ko.Spec.Matcher.GRPCCode)
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.Matcher.HTTPCode, b.ko.Spec.Matcher.HTTPCode) {
			delta.Add("Spec.Matcher.HTTPCode", a.ko.Spec.Matcher.HTTPCode, b.ko.Spec.Matcher.HTTPCode)
		} else if a.ko.Spec.Matcher.HTTPCode != nil && b.ko.Spec.Matcher.HTTPCode != nil {
			if *a.ko.Spec.Matcher.HTTPCode != *b.ko.Spec.Matcher.HTTPCode {
				delta.Add("Spec.Matcher.HTTPCode", a.ko.Spec.Matcher.HTTPCode, b.ko.Spec.Matcher.HTTPCode)
			}
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.Name, b.ko.Spec.Name) {
		delta.Add("Spec.Name", a.ko.Spec.Name, b.ko.Spec.Name)
	} else if a.ko.Spec.Name != nil && b.ko.Spec.Name != nil {
		if *a.ko.Spec.Name != *b.ko.Spec.Name {
			delta.Add("Spec.Name", a.ko.Spec.Name, b.ko.Spec.Name)
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.Port, b.ko.Spec.Port) {
		delta.Add("Spec.Port", a.ko.Spec.Port, b.ko.Spec.Port)
	} else if a.ko.Spec.Port != nil && b.ko.Spec.Port != nil {
		if *a.ko.Spec.Port != *b.ko.Spec.Port {
			delta.Add("Spec.Port", a.ko.Spec.Port, b.ko.Spec.Port)
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.Protocol, b.ko.Spec.Protocol) {
		delta.Add("Spec.Protocol", a.ko.Spec.Protocol, b.ko.Spec.Protocol)
	} else if a.ko.Spec.Protocol != nil && b.ko.Spec.Protocol != nil {
		if *a.ko.Spec.Protocol != *b.ko.Spec.Protocol {
			delta.Add("Spec.Protocol", a.ko.Spec.Protocol, b.ko.Spec.Protocol)
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.ProtocolVersion, b.ko.Spec.ProtocolVersion) {
		delta.Add("Spec.ProtocolVersion", a.ko.Spec.ProtocolVersion, b.ko.Spec.ProtocolVersion)
	} else if a.ko.Spec.ProtocolVersion != nil && b.ko.Spec.ProtocolVersion != nil {
		if *a.ko.Spec.ProtocolVersion != *b.ko.Spec.ProtocolVersion {
			delta.Add("Spec.ProtocolVersion", a.ko.Spec.ProtocolVersion, b.ko.Spec.ProtocolVersion)
		}
	}
	if len(a.ko.Spec.Tags) != len(b.ko.Spec.Tags) {
		delta.Add("Spec.Tags", a.ko.Spec.Tags, b.ko.Spec.Tags)
	} else if len(a.ko.Spec.Tags) > 0 {
		if !reflect.DeepEqual(a.ko.Spec.Tags, b.ko.Spec.Tags) {
			delta.Add("Spec.Tags", a.ko.Spec.Tags, b.ko.Spec.Tags)
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.TargetType, b.ko.Spec.TargetType) {
		delta.Add("Spec.TargetType", a.ko.Spec.TargetType, b.ko.Spec.TargetType)
	} else if a.ko.Spec.TargetType != nil && b.ko.Spec.TargetType != nil {
		if *a.ko.Spec.TargetType != *b.ko.Spec.TargetType {
			delta.Add("Spec.TargetType", a.ko.Spec.TargetType, b.ko.Spec.TargetType)
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.UnhealthyThresholdCount, b.ko.Spec.UnhealthyThresholdCount) {
		delta.Add("Spec.UnhealthyThresholdCount", a.ko.Spec.UnhealthyThresholdCount, b.ko.Spec.UnhealthyThresholdCount)
	} else if a.ko.Spec.UnhealthyThresholdCount != nil && b.ko.Spec.UnhealthyThresholdCount != nil {
		if *a.ko.Spec.UnhealthyThresholdCount != *b.ko.Spec.UnhealthyThresholdCount {
			delta.Add("Spec.UnhealthyThresholdCount", a.ko.Spec.UnhealthyThresholdCount, b.ko.Spec.UnhealthyThresholdCount)
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.VPCID, b.ko.Spec.VPCID) {
		delta.Add("Spec.VPCID", a.ko.Spec.VPCID, b.ko.Spec.VPCID)
	} else if a.ko.Spec.VPCID != nil && b.ko.Spec.VPCID != nil {
		if *a.ko.Spec.VPCID != *b.ko.Spec.VPCID {
			delta.Add("Spec.VPCID", a.ko.Spec.VPCID, b.ko.Spec.VPCID)
		}
	}
	if !reflect.DeepEqual(a.ko.Spec.VPCRef, b.ko.Spec.VPCRef) {
		delta.Add("Spec.VPCRef", a.ko.Spec.VPCRef, b.ko.Spec.VPCRef)
	}

	return delta
}
